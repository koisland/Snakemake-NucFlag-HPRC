include: "rules/common.smk"


SAMPLE_ASSEMBLIES, SAMPLE_READS = get_sample_assemblies_and_reads()
SAMPLE_INFO = {sm["name"]: sm for sm in config["samples"]}

TMP_DIR = config.get("tmp_dir", os.environ.get("TMPDIR", "/tmp"))
LOGS_DIR = config.get("logs_dir", "logs/nucflag")
BMKS_DIR = config.get("benchmarks_dir", "benchmarks/nucflag")


wildcard_constraints:
    sm="|".join(SAMPLE_ASSEMBLIES.keys()),


rule merge_asm_files:
    input:
        asm_files=lambda wc: ancient(SAMPLE_ASSEMBLIES[str(wc.sm)].values()),
    output:
        merged_asm=temp(os.path.join(config["output_dir"], "{sm}_merged_asm.fa")),
        asm=os.path.join(config["output_dir"], "{sm}_merged_dedup_asm.fa"),
    conda:
        "env/tools.yaml"
    resources:
        mem=8,
    log:
        os.path.join(LOGS_DIR, "merge_{sm}_asm_files.log"),
    shell:
        """
        for file in {input.asm_files}; do
            if [[ $file == *.gz ]]; then
                zcat $file >> {output.merged_asm}
            else
                cat $file >> {output.merged_asm}
            fi
        done
        seqkit rmdup {output.merged_asm} > {output.asm} 2> {log}
        """


rule align_reads_to_asm:
    input:
        asm=lambda wc: (
            rules.merge_asm_files.output.asm
            if isinstance(SAMPLE_ASSEMBLIES[str(wc.sm)], dict)
            else SAMPLE_ASSEMBLIES[str(wc.sm)]
        ),
        reads=lambda wc: SAMPLE_READS[str(wc.sm)][str(wc.id)],
    output:
        temp(os.path.join(config["output_dir"], "{sm}_{id}_hifi.bam")),
    threads: config["threads_aln"]
    resources:
        mem=config["mem_aln"],
        sort_mem=4,
    params:
        aln_log_level="DEBUG",
        aln_preset="SUBREAD",
        aln_min_length=5000,
        tmp_dir=config.get("tmp_dir", os.environ.get("TMPDIR", "/tmp")),
        samtools_view_flag=config["samtools_view_flag"],
    conda:
        "env/tools.yaml"
    log:
        os.path.join(LOGS_DIR, "align_{sm}_{id}_hifi_reads_to_asm.log"),
    benchmark:
        os.path.join(BMKS_DIR, "align_{sm}_{id}_hifi_reads_to_asm.tsv")
    shell:
        """
        {{ pbmm2 align \
        --log-level {params.aln_log_level} \
        --preset {params.aln_preset} \
        --min-length {params.aln_min_length} \
        -j {threads} {input.asm} {input.reads} | \
        samtools view -F {params.samtools_view_flag} -u - | \
        samtools sort -T {params.tmp_dir} -m {resources.sort_mem}G -@ {threads} - ;}} > {output} 2>> {log}
        """


def get_aln_to_asm(wc) -> list[str]:
    sm_reads = SAMPLE_READS[str(wc.sm)]
    samples = [str(wc.sm)] * len(sm_reads)

    alns = set(
        expand(rules.align_reads_to_asm.output, zip, sm=samples, id=sm_reads.keys())
    )
    if not alns:
        raise FileNotFoundError(f"No reads found for sample: {SAMPLE_INFO[str(wc.sm)]}")
    return ancient(alns)


rule merge_hifi_read_asm_alignments:
    input:
        get_aln_to_asm,
    output:
        alignment=os.path.join(config["output_dir"], "{sm}_hifi.bam"),
        alignment_idx=os.path.join(config["output_dir"], "{sm}_hifi.bam.bai"),
    threads: config["threads_aln"]
    resources:
        mem=16,
        sort_mem=4,
    params:
        tmp_dir=config.get("tmp_dir", os.environ.get("TMPDIR", "/tmp")),
    conda:
        "env/tools.yaml"
    log:
        os.path.join(LOGS_DIR, "merge_{sm}_hifi_read_asm_alignments.log"),
    benchmark:
        os.path.join(BMKS_DIR, "merge_{sm}_hifi_read_asm_alignments.tsv")
    shell:
        """
        {{ samtools merge -@ {threads} - {input} | \
        samtools sort -T {params.tmp_dir} -m {resources.sort_mem}G -@ {threads} -;}} > {output.alignment} 2> {log}
        samtools index {output.alignment} 2>> {log}
        """


rule check_asm_nucflag:
    input:
        bam_file=ancient(rules.merge_hifi_read_asm_alignments.output.alignment),
        # Optional arguments.
        regions=lambda wc: SAMPLE_INFO[str(wc.sm)].get("region_bed", []),
        config=lambda wc: SAMPLE_INFO[str(wc.sm)].get("config", []),
        ignore_regions=lambda wc: SAMPLE_INFO[str(wc.sm)].get("ignore_bed", []),
        overlay_regions=lambda wc: SAMPLE_INFO[str(wc.sm)].get("overlay_beds", []),
    output:
        plot_dir=directory(os.path.join(config["output_dir"], "{sm}")),
        misassemblies=os.path.join(
            config["output_dir"],
            "{sm}_cen_misassemblies.bed",
        ),
        asm_status=os.path.join(
            config["output_dir"],
            "{sm}_cen_status.bed",
        ),
    params:
        regions=lambda wc, input: f"-b {input.regions}" if input.regions else "",
        config=lambda wc, input: f"-c {input.config}" if input.config else "",
        ignore_regions=lambda wc, input: (
            f"--ignore_regions {input.overlay_regions}" if input.ignore_regions else ""
        ),
        overlay_regions=lambda wc, input: (
            f"--overlay_regions {' '.join(input.overlay_regions)}"
            if input.overlay_regions
            else ""
        ),
    threads: config["processes_nucflag"]
    conda:
        "env/nucflag.yaml"
    resources:
        mem=config["mem_nucflag"],
    log:
        os.path.join(LOGS_DIR, "run_nucflag_{sm}.log"),
    benchmark:
        os.path.join(BMKS_DIR, "run_nucflag_{sm}.tsv")
    shell:
        """
        nucflag \
        -i {input.bam_file} \
        -d {output.plot_dir} \
        -o {output.misassemblies} \
        -t {threads} \
        -p {threads} \
        -s {output.asm_status} \
        {params.config} \
        {params.regions} \
        {params.ignore_regions} \
        {params.overlay_regions} &> {log}
        """


rule nucflag:
    input:
        expand(rules.check_asm_nucflag.output, sm=SAMPLE_ASSEMBLIES.keys()),
    default_target: True
